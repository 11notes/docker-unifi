name: cron-update

on:
  workflow_dispatch:
  schedule:
    - cron: "0 5 * * *"

jobs:
  cron-update:
    runs-on: ubuntu-latest

    permissions:
      actions: read
      contents: write

    steps:   
      - name: init / checkout
        uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2
        with:
          ref: 'master'

      - name: cron-update / get latest version
        uses: actions/github-script@62c3794a3eb6788d9a2a72b219504732c0c9a298
        with:
          script: |
            (async()=>{
              let found = false;
              const res = await fetch('https://download.svc.ui.com/v1/software-downloads');
              if(res && res.status === 200){
                const json = await res.json();
                for(const download of json.downloads){
                  if(/debian/i.test(download.platform) && /unifi network application/i.test(download.name)){
                    core.exportVariable('LATEST_VERSION', download.version);
                    core.info(`found Unifi version ${download.version}`);
                    found = true;
                    break;
                  }
                }
              }

              if(!found){
                core.setFailed('no version for Unifi could be found!');
              }
            })();

      - name: cron-update / compare latest with current version
        uses: actions/github-script@62c3794a3eb6788d9a2a72b219504732c0c9a298
        with:
          script: |
            const { existsSync, readFileSync, writeFileSync } = require('node:fs');
            const { resolve } = require('node:path');
            const { inspect } = require('node:util');
            const latest = "${{ env.LATEST_VERSION }}";
            const repository = {dot:{}};

            try{
              const path = resolve('.json');
              if(existsSync(path)){
                try{
                  repository.dot = JSON.parse(readFileSync(path).toString());
                }catch(e){
                  throw new Error('could not parse .json');
                }
              }else{
                throw new Error('.json does not exist');
              }
            }catch(e){
              core.setFailed(e);
            }

            const current = repository.dot.semver.version;

            if(latest.match(/\d+\.\d+\.\d+/i) && latest !== repository.dot.semver.version){
              core.info(`found newer version ${latest}`);
              repository.dot.semver.version = latest.split('.').slice(0,3).join('.');
              if(repository.dot.semver?.latest){
                repository.dot.semver.latest = repository.dot.semver.version;
              }
              if(repository.dot?.readme?.comparison?.image){
                repository.dot.readme.comparison.image = repository.dot.readme.comparison.image.replace(current , repository.dot.semver.version);
              }
              try{
                writeFileSync(resolve('.json'), JSON.stringify(repository.dot, null, 2));
                core.exportVariable('WORKFLOW_AUTO_UPDATE', true);
              }catch(e){
                core.setFailed(e);
              }
            }else{
              core.info(`latest version ${latest} is equal to current version ${repository.dot.semver.version}, no update needed!`);
            }

            core.info(inspect(repository.dot, {showHidden:false, depth:null, colors:true}));

      - name: cron-update / checkout
        id: checkout
        if: env.WORKFLOW_AUTO_UPDATE == 'true'
        run: |         
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add .json
          git commit -m "[upgrade] ${{ env.LATEST_VERSION }}"
          git push origin HEAD:master

      - name: cron-update / build docker image
        if: env.WORKFLOW_AUTO_UPDATE == 'true' && steps.checkout.outcome == 'success'
        uses: the-actions-org/workflow-dispatch@3133c5d135c7dbe4be4f9793872b6ef331b53bc7
        with:
          wait-for-completion: false
          workflow: docker.yml
          token: "${{ secrets.REPOSITORY_TOKEN }}"
          inputs: '{ "release":"false", "readme":"true" }'

      - name: cron-update / base64 nested json for Unraid
        uses: actions/github-script@62c3794a3eb6788d9a2a72b219504732c0c9a298
        with:
          script: |
            const { Buffer } = require('node:buffer');
            const etc = {
              semversuffix:"unraid",
              uid:99,
              gid:100,
            };
            core.exportVariable('WORKFLOW_BASE64JSON', Buffer.from(JSON.stringify(etc)).toString('base64'));
              
      - name: cron-update / build docker image Unraid
        if: env.WORKFLOW_AUTO_UPDATE == 'true' && steps.checkout.outcome == 'success'
        uses: the-actions-org/workflow-dispatch@3133c5d135c7dbe4be4f9793872b6ef331b53bc7
        with:
          wait-for-completion: false
          workflow: docker.yml
          token: "${{ secrets.REPOSITORY_TOKEN }}"
          inputs: '{ "release":"false", "readme":"false", "run-name":"unraid", "etc":"${{ env.WORKFLOW_BASE64JSON }}" }'